// <auto-generated />
using System;
using BankAccount.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankAccount.Data.Migrations
{
    [DbContext(typeof(BankAccountContext))]
    partial class BankAccountContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BankAccount.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal");

                    b.Property<int>("BankCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IdBank")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdOwner")
                        .HasColumnType("char(36)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdBank");

                    b.HasIndex("IdOwner")
                        .IsUnique();

                    b.ToTable("tbAccount");
                });

            modelBuilder.Entity("BankAccount.Domain.BankStatements.BankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OwnerId");

                    b.ToTable("tbBankStatement");
                });

            modelBuilder.Entity("BankAccount.Domain.Banks.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AuthenticatedUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BankCode")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tbBank");
                });

            modelBuilder.Entity("BankAccount.Domain.Clients.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IdAccount")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("tbOwner");
                });

            modelBuilder.Entity("BankAccount.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("IdAccount")
                        .IsRequired()
                        .HasColumnType("binary(32)");

                    b.Property<byte[]>("IdBank")
                        .IsRequired()
                        .HasColumnType("binary(32)");

                    b.Property<DateTime>("MovDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("tbTransaction");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("BankAccount.Domain.Transactions.Deposit", b =>
                {
                    b.HasBaseType("BankAccount.Domain.Transactions.Transaction");

                    b.HasDiscriminator().HasValue("Deposit");
                });

            modelBuilder.Entity("BankAccount.Domain.Transactions.Withdrawal", b =>
                {
                    b.HasBaseType("BankAccount.Domain.Transactions.Transaction");

                    b.HasDiscriminator().HasValue("Withdrawal");
                });

            modelBuilder.Entity("BankAccount.Domain.Accounts.Account", b =>
                {
                    b.HasOne("BankAccount.Domain.Banks.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankAccount.Domain.Clients.Owner", "Owner")
                        .WithOne("Account")
                        .HasForeignKey("BankAccount.Domain.Accounts.Account", "IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAccount.Domain.BankStatements.BankStatement", b =>
                {
                    b.HasOne("BankAccount.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("BankAccount.Domain.Clients.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("BankAccount.Domain.Clients.Owner", b =>
                {
                    b.OwnsOne("BankAccount.Domain.Shared.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .HasColumnName("City")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("Country")
                                .HasColumnName("Country")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("Neighborhood")
                                .HasColumnName("Neighborhood")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("Number")
                                .HasColumnName("Number")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("State")
                                .HasColumnName("State")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("Street")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ZipCode")
                                .HasColumnName("ZipCode")
                                .HasColumnType("VARCHAR(100)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("tbOwner");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("BankAccount.Domain.Shared.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Number")
                                .HasColumnName("Cpf")
                                .HasColumnType("VARCHAR(100)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("tbOwner");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("BankAccount.Domain.Shared.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("FirstName")
                                .HasColumnName("FirstName")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("LastName")
                                .HasColumnName("LastName")
                                .HasColumnType("VARCHAR(100)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("tbOwner");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });
                });

            modelBuilder.Entity("BankAccount.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("BankAccount.Domain.Banks.Bank", "Bank")
                        .WithMany("Transactions")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("BankAccount.Domain.Transactions.Deposit", b =>
                {
                    b.HasOne("BankAccount.Domain.Accounts.Account", "Account")
                        .WithMany("Deposits")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAccount.Domain.Transactions.Withdrawal", b =>
                {
                    b.HasOne("BankAccount.Domain.Accounts.Account", "Account")
                        .WithMany("Withdrawals")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_tbTransaction_tbAccount_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
